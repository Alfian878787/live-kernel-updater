#!/bin/bash

      ME=${0##*/}
  MY_DIR=$(dirname "$(readlink -f $0)")

#== BEGIN_CONFIG

           K_IFS="|"

         LIVE_MP="/live/boot-dev"
        LIVE_DIR="antiX"
        BOOT_DIR="boot"

    LINUXFS_NAME="linuxfs"
    VMLINUZ_NAME="vmlinuz"
  VMLINUZ_2_NAME="vmlinuz1"
     INITRD_NAME="initrd.gz"

        # for kernel and initrd.gz files
       KOLD_EXT=".kold"
       KBAD_EXT=".kbad"
        MD5_EXT=".md5"

        # For linuxfs file (right after a remaster)
         NEW_EXT=".new"

        BZ2_OPTS="-c -9"
         GZ_OPTS="-c -9"
         LZ_OPTS="-c -9"
         XZ_OPTS="-c -z --format=lzma"

       CPIO_OPTS="-o -H newc --owner root:root --quiet"

       COPY_OPTS="--quiet --count"

       SHELL_LIB="cli-shell-utils.bash"
        LIB_PATH="/usr/local/lib/shell-utils"

   MAJOR_DEV_LIST="3,8,22,179,259"

#== END_CONFIG

        WORK_DIR="/run/$ME"
            FIFO="/run/$ME/fifo"
       LOCK_FILE="/run/lock/$ME"
    THE_LOG_FILE="/var/log/$ME.log"
    THE_ERR_FILE="/var/log/$ME.errors"
        LOG_FILE="/dev/null"
        ERR_FILE="/dev/null"

        ALL_CMDS="rollback all unpack copy repack install"
       ALL_FORCE="all,rollback,flock,clear,compress,usb"
       ALL_PAUSE="all,fifo,mount,unpack,copy,repack,clean"

            PATH="$MY_DIR:/usr/local/share/$ME/bin:$PATH"

usage() {
    local ret=${1:-0}

cat<<Usage
Usage: $ME [options] [command]
Update the kernel on a running antiX or MX live-usb.  The new
kernel must already be installed.  If the name (uname -r) of the new
kernel is not give then you will be prompted for it from a menu.

Commands:
   all         All commands below
   unpack      Unpack the old initrd
   copy        Copy kernel modules into initrd
   repack      Repack the new initrd
   install     Copy new initrd and vmlinuz to the live boot directory

Options:
  -a --auto             Non-interactive.  Always assume the safe answer
     --color=<xxx>      Set color scheme to off|low|high
  -D --debug            Pause before cleaning up
  -d --device=<device>  live-usb device to update the kernel on
                        (use "live" to force updating a running live system)
  -f --force=XXXX       Force the options specfied:
                             flock:  ignore missing flock program
                               usb:  Allow non-usb devices (dangerous!)
                             clear:  remove previous initrd directory
  -h --help             Show this usage
  -i --initrd=<name>    Name of initrd file ($INITRD_NAME)
  -k --kernel=<kernel>  The version (uname -r) of the new kernel
  -K --keep-old         Keep the old module directory in the initrd
  -p --pretend          Don't run the install commands
     --pause=<list>     Pause after certain stages of processing:
                            mount
                            unpack
                            copy
                            repack
                            install

  -q --quiet            Print less
  -v --verbose          Print more, show commands when run

Notes:
  - short options stack. Example: -pq instead of -p -q
  - options can be intermingled with commands and parameters
Usage
    exit $ret
}

eval_argument() {
    local arg=$1 val=$2
    case $arg in
              -auto|a)  AUTO_MODE=true                  ;;
               -color)  set_colors "$val"               ;;
             -color=*)  set_colors "$val"               ;;
            -device|d)  DEVICE=$val                     ;;
            -device=*)  DEVICE=$val                     ;;
             -debug|D)  DEBUG=true                      ;;
             -force|f)  FORCE="$FORCE${FORCE:+,}$val"   ;;
             -force=*)  FORCE="$FORCE${FORCE:+,}$val"   ;;
#               -fifo)  FIFO_MODE=true                  ;;
              -help|h)  usage                           ;;
            -initrd|i)  CMD_INITRD=$val                 ;;
            -initrd=*)  CMD_INITRD=$val                 ;;
            -kernel|k)  NEW_KERNEL=$val                 ;;
            -kernel=*)  NEW_KERNEL=$val                 ;;
          -keep-old|K)  KEEP_OLD=true                   ;;
           -pretend|p)  PRETEND=true ;                  ;;
               -pause)  PAUSE="$PAUSE${PAUSE:+,}$val"   ;;
             -pause=*)  PAUSE="$PAUSE${PAUSE:+,}$val"   ;;
             -quiet|q)  QUIET=true                      ;;
           -verbose|v)  BE_VERBOSE=true                 ;;
               *)  fatal "Unknown parameter %s" "-$arg" ;;
    esac
}

takes_param() {
    case $1 in
             -color) return 0 ;;
          -device|d) return 0 ;;
          -initrd|i) return 0 ;;
           -force|f) return 0 ;;
          -kernel|k) return 0 ;;
             -pause) return 0 ;;
    esac
    return 1
}

assign_parameter() {
    local cnt=$1 param=$2
   case $cnt in
        *) CMDS="$CMDS${CMD:+ }$param" ;;
    esac
}

main() {
    local SHIFT SHORT_STACK="adDfhikKpqv"
    local BE_VERBOSE
    local orig_args="$*"

    # [ $# -eq 0 ] && usage

    read_all_cmdline_mingled "$@"

    #[ $opt_cnt -ne 1 ] && fatal 011 "Expected one command line argument"

    EXIT_NUM=100
    [ $UID -eq 0 ] || fatal 101 "This script must be run as root"

    need_prog vmlinuz-version copy-initrd-modules

    trap clean_up EXIT

    do_flock $LOCK_FILE $ME

    : ${CMDS:=all}

    check_cmds  CMDS  "$ALL_CMDS"
    check_force FORCE "$ALL_FORCE"
    check_pause PAUSE "$ALL_PAUSE"

    start_log "$orig_args"

    #[ "$FIFO_MODE" -a "$AUTO_MODE" ] && fatal "Cannot select both %s and %s" "--fifo" "--auto"

    [ "$PRETEND" ] && shout "PRETEND MODE ENABLED"

     USB_DIR=$WORK_DIR/usb
    SQFS_DIR=$WORK_DIR/linux

    local root_dir=$SQFS_DIR

    # FIXME When to clear?  When to clean?
    [ "$CLEAR_WORK" ] && rm -rf "$WORK_DIR"

    mkdir -p $WORK_DIR || fatal 120 "Could not make a work directory under /run"
    mount -t tmpfs tmpfs $WORK_DIR || fatal 121 "Could not mount tmpfs at %s" $WORK_DIR

    local we_are_live
    if its_alive_usb; then
        we_are_live=true
        live_dev=$(sed -rn "s|^([^ ]+) $LIVE_MP .*|\1|p" /proc/mounts)
        fatal_z "$live_dev" "Could not find the live boot device"
        live_dev=${live_dev##*/}
        msg "Current running kernel is %s" "$(pq $(uname -r))"
    fi

    #==============================================================================
    # The First Menu
    #==============================================================================
    local all_dev
    force usb && all_dev=true
    [ ${#DEVICE} -eq 0 ] && select_live_usb_device DEVICE "$live_dev" $all_dev

    # Are we going to update a running live system or an plugged in live-usb?
    local usb_dev live_mp

    #----- RUNNING LIVE -------------------------------------------------------
    if [ "$DEVICE" = "live" ]; then
        fatal_z "$we_are_live" "This is not a live-usb system"
        live_mp=$LIVE_MP
        msg "Will use running live system"

    #----- LIVE-USB -----------------------------------------------------------
    else
        fatal_z "Must specify a device if not running live"
        usb_dev=$(expand_device $DEVICE)
        fatal_z "$usb_dev" $"Could not find device %s" "$DEVICE"

        force usb || is_usb_or_removable $usb_dev \
            || fatal usb $"The device '%s' does not appear to be a usb device" "$usb_dev"

        local dev_type=$(lsblk -no type --nodeps $usb_dev)

        # Allow user to specify disk device instead of partition
        if [ "$dev_type" = "disk"  ]; then
            local part_dev=$(get_partition $usb_dev 1)
            dev_type=$(lsblk -no type --nodeps $part_dev)
            if [ "$dev_type" = "part" ]; then
                usb_dev=$part_dev
            else
                fatal $"Can't find first partition on device %s" $usb_dev
            fi
        fi
        [ "$dev_type" = "part" ] || fatal $"Device %s is not a disk partition" $usb_dev

        local usb_drive=$(get_drive $usb_dev)
        umount_all $usb_drive

        my_mount $usb_dev $USB_DIR
        msg "Will use live-usb device %s" "$(pq $usb_dev)"
        live_mp=$USB_DIR
    fi

    is_mountpoint "$live_mp" || fatal "Expected '%s' to be a mountpoint" "$live_mp"

    local full_live_dir=$live_mp/${LIVE_DIR#/}
    check_writable "$full_live_dir" "live boot"

    # Find the linuxfs file (where we get new kernels and modules from)
    # Use the remastered linuxfs.new if it is available.
    local ext file linuxfs_name
    for ext in "$NEW_EXT" ""; do
        file=$full_live_dir/$LINUXFS_NAME$ext
        test -r $file || continue
        linuxfs_name=$file
        break
    done

    fatal_z "$linuxfs_name" "Could not find '%s' or '%s' on the live-usb" \
        $(pqh "$LINUXFS_NAME$NEW_EXT") $(pqh "$LINUXFS_NAME")

    local live_remaster
    if [ -z "${linuxfs_name%%*$NEW_EXT}" ]; then
        live_remaster=true
        msg "Found %s file %s" $(pq live-remaster) $(pq $(basename $linuxfs_name))
    else
        msg "Found %s file %s" $(pq linuxfs) $(pq $(basename $linuxfs_name))
    fi

    # Fix me?
    my_mount "$linuxfs_name" "$root_dir" -t squashfs -o loop,ro
    local full_boot_dir="$root_dir/${BOOT_DIR#/}"

    pause mount

    full_initrd="$full_live_dir/$INITRD_NAME"
    test -e "$full_initrd" || fatal "Could not find initrd file: %s" "$full_initrd"

    # default live kernels: vmlinuz and vmlinuz1
    local both_vm=$VMLINUZ_NAME
    [ -n "$sVMLINUZ_2_NAME" ] && both_vm="$both_vm|$VMLINUZ_2_NAME"

    local live_all=$(get_all_kernel "$full_live_dir")                         # all in live dir
    local boot_all=$(get_all_kernel "$full_boot_dir")                         # all in boot dir
    local boot_mod=$(get_all_kernel "$full_boot_dir" --mod-dir="$root_dir")   # boot dir with module dir

    local live_vm=$(find_kernel_fname "$both_vm" "$live_all")                 # live with default vmlinuz names
    local vm_cnt=$(count_lines "$live_vm")

    local live_versions=$(get_kernel_version "$live_vm" | tr "\n" "|")
    live_versions=${live_versions%|}

    local boot_new=$(find_kernel_version "$live_versions" "$boot_all" -v)
    local new_cnt=$(count_lines "$boot_new")

    local live_old=$(find_kernel_fname "($both_vm)$KOLD_EXT" "$live_all")

    msg_1 "$new_cnt" "Found one new kernel %s"     "$(pq $(get_kernel_version $boot_new))"
    msg_1 "$vm_cnt"  "Found one default kernel %s" "$(pq $(get_kernel_fname "$live_vm"))"

    msg "Found:"
    msg_kernel "$live_all"  "total live kernel"       "total live kernels"
    msg_kernel "$live_vm"   "default live kernel"     "default live kernels"
    msg_kernel "$live_old"  "old live kernel"         "old live kernels"
    msg
    msg_kernel "$boot_all"  "total installed kernel"  "total installed kernels"
    msg_kernel "$boot_new"  "new installed kernel"    "new installed kernels"

    show_kernel_3 "Live Kernels:" "$live_all" | strip_color >> $LOG_FILE
    show_kernel_2 "Boot Kernels:" "$boot_mod" | strip_color >> $LOG_FILE

    fatal_k0 "$boot_all" $"No kernels found in the boot directory"
    fatal_k0 "$boot_mod" $"No valid kernels found in the boot directory"
    fatal_k0 "$live_all"  $"No kernels found in the live boot directory"

    if [ $new_cnt -eq 0 ]; then
        error $"No new kernels were found"
        fatal $"You must install a kernel and then remaster before a kernel upgrade"
    fi

    #==============================================================================
    # The Second Menu
    #==============================================================================
    local action_target
    select_update_rollback_action action_target "$live_vm" "$live_old" "$new_cnt"
    local action=${action_target%@*}
    local target_fname=${action_target#*@}

    #----- Update Action -------------------------------------------------------------------------
    local new_kernel new_version new_fname stat_list action_name
    if [ "$action" = "update" ]; then
        action_name=$"update"

        target=$(find_kernel_fname "$target_fname" "$live_vm")

        #==========================================================================
        # The Third Menu (only if needed)
        #==========================================================================
        select_new_kernel new_kernel "$NEW_KERNEL" "$boot_new"
        new_fname=$(get_kernel_fname "$new_kernel")
        new_version=$(get_kernel_version "$new_kernel")
        test -d $root_dir/lib/modules/$new_version \
            || fatal "Missing modules directory for kernel '%s'" "$new_version"

        stat_list="
Current$K_IFS$target_fname$K_IFS$target_fname$KOLD_EXT$K_IFS$target
New$K_IFS(new)$K_IFS$target_fname$K_IFS$new_kernel"

    #---- Rollback Action ---------------------------------------------------------
    elif [ "$action" = "rollback" ]; then
        action_name=$"rollback"
        target=$(find_kernel_fname "$target_fname" "$live_vm")
        new_kernel=$(find_kernel_fname "$target_fname$KOLD_EXT" "$live_old")
        new_fname=$(get_kernel_fname "$new_kernel")
        new_version=$(get_kernel_version "$new_kernel")
        test -d $root_dir/lib/modules/$new_version \
            || fatal "Missing modules directory for kernel '%s'" "$new_fname"

        stat_list="
Current$K_IFS$target_fname$K_IFS$target_fname$KBAD_EXT$K_IFS$target
Old$K_IFS$target_fname$KOLD_EXT$K_IFS$target_fname$K_IFS$new_kernel
"
    else
        fatal "Internal error.  Unknown action %s" "$action"
    fi

    msg
    quest "Ready to make the following live kernel %s:\n" "$(pqq $action_name)"
    #kernel_stats "$stat_list" | log_it
    log_it kernel_stats "$stat_list"

    YES_no "Shall we begin?" || my_exit

    if [ "$action" = "rollback" ]; then
        do_rollback  "$full_live_dir" "$target_fname" "$INITRD_NAME"
        my_exit
    fi

    local initrd_dir=$WORK_DIR/initrd
    local tmp_initrd_file="$WORK_DIR/$(basename $full_initrd).tmp"
    local compression_file="$WORK_DIR/compression"
    local cpio_files="$WORK_DIR/cpio.{in,out}"

    if [ ${#CMDS} -le 0 ]; then
        echo -e "No command(s) given.  Try 'all'."
        exit 0
    fi

    # NEED: $new_version  $new_fname $targ_fname
    #--------------------------------------------------------------------------
    #----- REAL WORK STARTS HERE ----------------------------------------------
    #--------------------------------------------------------------------------
    if need unpack; then

        if force clear; then
            cmd rm -rf "$initrd_dir/../initrd"
            cmd rm -f "$tmp_initrd_file" $compression_file $cpio_files
        else
            test -d "$initrd_dir" && yes_NO_fatal "clear" \
                "Do you want to delete it now"            \
                "Use --force=clear to always delete it"   \
                "Will not over-write an existing initrd directory."
        fi

        unpack_initrd "$full_initrd" "$initrd_dir"  "$compression_file"
    fi

    pause unpack

    if need copy; then
        always_cmd \
            copy-initrd-modules $COPY_OPTS --from="$root_dir" --to="$initrd_dir" --kernel="$new_version" \
            || fatal "Copy initrd modules failed"
    fi

    pause copy

    need repack && repack_initrd "$initrd_dir" "$tmp_initrd_file"  "$compression_file"
    pause repack

    if need install; then
        do_install "$tmp_initrd_file" "$full_initrd"
        do_install "$full_boot_dir/$new_fname" "$full_live_dir/$target_fname"
    fi
    pause install

    my_exit 0
}

#==============================================================================
# END OF MAIN
#==============================================================================

#==============================================================================
# Menu Routines
#==============================================================================
#------------------------------------------------------------------------------
# This is the first menu.  It is used to select the current live system or a
# plugged in usb or removable device.
#------------------------------------------------------------------------------
select_live_usb_device() {
    local var=$1 ; shift
    local menu=$(cli_drive_menu "$@")

    if [ "$live_dev" ]; then
        local title=$(printf "The current Live System on %s" "$(pq $live_dev)")
        menu=$(printf "live:$m_co%s$nc_co\n%s" "$title" "$menu")
    fi

    fatal_0 $(count_lines "$menu") "usb" "The system is not live and no usb drives were detected"

    my_select_quit "$var" "Please select the system to upgrade" "$menu"
}

#------------------------------------------------------------------------------
# This is the second menu.  It selects which action to take: update or rollback
# and which vmlinuz file (vmlinuz or vmlinuz1) to perform it on.
#------------------------------------------------------------------------------
select_update_rollback_action() {
    local var=$1  live_vm=$2  old_vm=$3  new_cnt=$4  orig_ifs=$IFS
    IFS=$K_IFS

    # FIXME: go through thwice to get widths!
    local fmt="%s:$m_co%s$bold_co %s$m_co %s$nc_co (%s %s)\n"
    local live_k  action='update' what=$"Update"
    if [ $new_cnt -gt 0 ]; then
        while read version fname date; do
            menu="$menu$(printf "$fmt" "$action@$fname" "$what" "$fname" $"from" "$version" "$date")\n"
        done <<Live_VM
$(echo "$live_vm")
Live_VM
    fi
    action="rollback" what=$"Rollback"
    fmt="%s:$m_co%s$bold_co %s$m_co %s$nc_co (%s %s)\n"
     while read version fname date; do
        fname=${fname%$KOLD_EXT}
        menu="$menu$(printf "$fmt" "$action@$fname" "$what" "$fname" $"to" "$version" "$date")\n"
    done <<Old_VM
$(echo "$old_vm")
Old_VM

    menu=$(echo -e "$menu")

    local cnt=$(count_lines "$menu")
    fatal_0 "$cnt" "No update or rollback actions are available"

    my_select_quit $var  "Please select an action to perform" "$menu"
    IFS=$orig_ifs
}

#------------------------------------------------------------------------------
# This is the third menu.  It lets the user select the new kernel that will
# be used when they do an upgrade.  If there is only one new kernel then that
# kernel is selected and there is no menu.
#------------------------------------------------------------------------------
select_new_kernel() {
    local var=$1  cmd_version=$2  list=$3  cnt=$(count_lines "$3")

    fatal_0 $cnt "Did not find any new kernels in the boot directory"

    if [ ${#cmd_version} -gt 0 ]; then
        local cmd_kernel=$(find_kernel_version "$cmd_version" "$list")
        local cmd_cnt=$(count_lines "$cmd_kernel")
        case $cmd_cnt in
            0) fatal "No new kernels match the requested version %s" "$cmd_version" ;;

            1) msg "Found one kernel matching the requested version %s" "$(pq $cmd_version)"
               eval "$var=\$list"
               return ;;

            *) fatal "Found multiple kernels matching the requested version %s" "$cmd_version" ;;
        esac
    fi

    case $cnt in
        1)  msg "Found one new kernel %s" "$(pq $(get_kernel_version $list))"
            eval "$var=\$list"
            return ;;
    esac
    echo

    select_kernel_2 "Please select the new kernel from this list" $var "$list"
}

#------------------------------------------------------------------------------
# This has been replaced by the update_rollback menu above
#------------------------------------------------------------------------------
select_live_target() {
    local var=$1  list=$2  cnt=$(count_lines "$2")

    fatal_0 $cnt "fixme: something's wrong.  No live kernels were found"

    # FIXME!?!
    if [ "$DEVICE" = "live"  ]; then
        local cur_version=$(uname -r)
        local cur_vm=$(find_kernel_version "$cur_version" "$list")
        local cur_cnt=$(count_lines "$cur_version")
        case $cur_cnt in
            0) warn "No live kernel matches the kernel running now" ;;
            1) msg  "The kernel running now is in the file %s" "$(get_kernel_fname "$cur_vm")" ;;
            2) warn "more than one live kernel matches the kernel running now" ;;
        esac
    fi

    case $cnt in
        1) msg "Found one default kernel %s" "$(pq $(get_kernel_fname "$list"))"
            eval $var=\$list
            return
            ;;

        2) ;;
        *) fatal "More than two live targets were found" ;;
    esac

    select_kernel_3 "Please select which live kernel you want to replace" $var "$list"
}


#==============================================================================
# The Routines that do the "real" work.
#==============================================================================
#------------------------------------------------------------------------------
# Unpacks the initrd file.  Does it in two steps. Records the compression
# type.  The framework is here to deal with multiple compression types and
# archive types but it has not been tested!
#------------------------------------------------------------------------------
unpack_initrd() {
    local file=$1  dir=$2  compression_file=$3
    local compression=$(file -b "$file" | cut -d" " -f1)

    local compress args
    case $compression in
         gzip) compress="gzip"   ; args="-cd"  ;;
        bzip2) compress="bzip2"  ; args="-cd"  ;;
         lzip) compress="lzip"   ; args="-cd"  ;;
           XZ) compress="xz"     ; args="-cd"  ;;
            *) fatal "Don't know how to decompress a '%s' file" "$compression" ;;
    esac
    echo "$compress" > $compression_file

    need_prog $compress
    my_mkdir "$dir"

    local cpio_file="$dir.in"
    $compress $args "$file" > "$cpio_file" || fatal "The decompression program '%s' failed" "$decomp"

    local unpack archive_type=$(file -b "$cpio_file")
    case $archive_type in
        *" cpio archive"*) unpack="cpio" ; args="-idum --quiet" ;;
         *" tar archive"*) unpack="tar"  ; args="-x"            ;;
                       *) fatal "unknown initrd archive type '%s'" "$archive_type"
    esac
    (cd "$dir" && $unpack $args) < "$cpio_file" || fatal "The %s extraction failed" "$unpack"
}

#------------------------------------------------------------------------------
# Pretty much the inverse of unpack_initrd().  We leave everything in the work
# directory until we do the actual install.
#------------------------------------------------------------------------------
repack_initrd() {
    local dir=$1  file=$2  compression_file=$3
    local compress
    read compress 2>/dev/null < $compression_file
    : ${compress:=gzip}

    local args
    case $compress in
         bzip2) args="$BZ2_OPTS" ;;
          gzip) args="$GZ_OPTS"  ;;
          lzip) args="$LZ_OPTS"  ;;
            xz) args="$XZ_OPTS"  ;;
             *) yes_NO_fatal "compress" \
               "Do you want to continue on using gzip compression?" \
               "Use %s to skip this question in the future" \
               "Unknown compression format: %s" "$compression"
                compress="gzip" ; args="$GZIP_OPTS"  ;;
    esac

    need_prog $compress

    local cpio_file="$dir.out"
    (cd "$dir" && find . | cpio $CPIO_OPTS) > $cpio_file \
        || fatal "Could not create a cpio archive"

    msg "Compressing ..."
    $compress $args < "$cpio_file" > "$file" || fatal "Compression (%s) failed" $compress
}

#------------------------------------------------------------------------------
# Installs a file from "$from" to "$to".  Makes a backup of the original and
# also makes an md5sum of the new file.
#------------------------------------------------------------------------------
do_install() {
    local from=$1  dest=$2
    test -f "$from" || fatal "Installation file %s does not exist" "$from"

    msg "install %s" "$(pq $(basename $dest))"
    #msg "install %s --> %s" "$from" "$dest"

    if test -e "$dest"; then
        if [ -n "${dest%%*$KOLD_EXT}" ]; then
            local backup="$dest$KOLD_EXT"
            # msg "backing up %s to %s" "$(pq $(basename "$dest"))" "$(pq $(basename "$backup"))"
            cmd mv "$dest" "$backup"
        else
            warn "Overwriting backup"
        fi
    else
        warn "Target file %s does not exist" "$dest"
    fi

    cmd cp -p "$from" "$dest"

    local md5_file=$dest$MD5_EXT
    #test -e $md5_file && cmd mv $md5_file $dest$KOLD_EXT$MD5_EXT
    local md5_sum=$(cd $(dirname $dest) && md5sum $(basename $dest))
    cmd write_file "$md5_file" "$md5_sum"
}

#------------------------------------------------------------------------------
# Perform the rollback action by moving
#       X      -->  X.kbad
#       X.kold -->  X
# Then make new md5 files.
#------------------------------------------------------------------------------
do_rollback() {
    local dir=$1  vmlinuz=$2  initrd=$3

    local the_initrd="$dir/$initrd"
    local old_initrd="$the_initrd$KOLD_EXT"
    local bad_initrd="$the_initrd$KBAD_EXT"

    local the_vmlinuz="$dir/$vmlinuz"
    local old_vmlinuz="$the_vmlinuz$KOLD_EXT"
    local bad_vmlinuz="$the_vmlinuz$KBAD_EXT"


    test -e "$old_vmlinuz" || fatal "Could not find old %s file to roll back" "$vmlinuz$K_OLD"
    test -e "$old_initrd"  || fatal "Could not find old %s file to roll back" "$initrd$K_OLD"

    msg "Roll back %s to %s" "$(pq $(basename "$old_initrd"))" "$(pq $initrd)"
    cmd mv "$the_initrd" "$bad_initrd"
    cmd mv "$old_initrd" "$the_initrd"

    msg "Roll back %s to %s" "$(pq $(basename "$old_vmlinuz"))" "$(pq $vmlinuz)"
    cmd mv "$the_vmlinuz" "$bad_vmlinuz"
    cmd mv "$old_vmlinuz" "$the_vmlinuz"

    local dest md5_file md5_sum
    for dest in "$the_initrd" "$the_vmlinuz"; do
        md5_file=$dest$MD5_EXT
        #test -e $md5_file && cmd mv $md5_file $dest$KOLD_EXT$MD5_EXT
        md5_sum=$(cd $(dirname $dest) && md5sum $(basename $dest))
        cmd write_file "$md5_file" "$md5_sum"
    done
}

#===============================================================================
# Kernel utilities
#
# These create and work with lists of kernels of the form:
#
#   version|fname|date
#
#===============================================================================

#------------------------------------------------------------------------------
# get_all_kernel      construct a list of all kernel files in a directory
#
# get_kernel_version  extract a list of versions, fnames, or dates from a
# get_kernel_fname    list of kernels
# get_kernel_date
#
# count_lines         Count lines in a variable, number of kernels in a list
#------------------------------------------------------------------------------
get_all_kernel()      { vmlinuz-version -nsr --delimit="$K_IFS" "$@"        ;}

get_kernel_version()  { echo "$1" | cut -d"$K_IFS" -f1                      ;}
get_kernel_fname()    { echo "$1" | cut -d"$K_IFS" -f2                      ;}
get_kernel_date()     { echo "$1" | cut -d"$K_IFS" -f"1,3" --compliment     ;}
count_lines()         { echo "$1" | grep -c .                               ;}

#------------------------------------------------------------------------------
# Get kernels from a list that match the version expression
# FIXME: escape escape escape!
#------------------------------------------------------------------------------
find_kernel_version() {
    local version=$1  list=$2 ;  shift 2
    echo "$list" | egrep "$@" "^($version)[$K_IFS]"
}

#------------------------------------------------------------------------------
# Get kernels from a list that match the fname expression
#------------------------------------------------------------------------------
find_kernel_fname()   {
    local fname=$1  list=$2 ; shift 2
    echo "$list" | egrep "$@" "^[^$K_IFS]*[$K_IFS]($fname)[$K_IFS]"
}

fatal_k0() {
    local cnt=$(count_lines "$1") ; shift
    fatal_0 $cnt "$@"
}

#------------------------------------------------------------------------------
# Currently not used.  Filter out kernels that don't have a module directory.
#------------------------------------------------------------------------------
find_valid_kernel() {
    local var=$1  list=$2  dir=$2  out

    local line version
    while read line; do
        version=$(get_kernel_version "$line")
        if -d "$dir/lib/modules/$version"; then
            out="$out$line\n"
        else
            warn "No module directory found for kernel %s" "$version"
        fi
    done<<List
$(echo -n "$list")
List
    out=$(echo -e "$out")
    eval $var=\$out
}

#------------------------------------------------------------------------------
# Format some simple counts of kernels in lists.  It allows us to use plural
# or singular forms that can be easily translated.
#------------------------------------------------------------------------------
msg_kernel() {
    local list=$1 lab1=$2 lab2=$3
    local cnt=$(count_lines "$list")

    if [ $cnt -ne 1 ]; then
        msg "  %2s %s %s" $(nq $cnt) "$lab2"
    else
        local version=$(get_kernel_version "$list")
        msg "  %2s %-24s (%s)" $(nq $cnt) "$lab1" "$(pq $version)"
        return
    fi
}


#------------------------------------------------------------------------------
# Do a few things before cleaning up.
#------------------------------------------------------------------------------
my_exit() {
    local ret=${1:-0}

    if [ "$DEBUG" ]; then
        #echo -n "${green}Press <Enter>$nc_co "
        msg "debug shell"
        bash -I
    fi

    Msg "=> cleaning up"
    exit $ret
}

#------------------------------------------------------------------------------
# Start logging
#------------------------------------------------------------------------------
start_log() {
    local args=$1 cmds=${2# }

    LOG_FILE=$THE_LOG_FILE
    ERR_FILE=$THE_ERR_FILE

    rm -f $ERR_FILE

    test -e $LOG_FILE && echo >> $LOG_FILE

    cat <<Start_Log >> $LOG_FILE
---------------------------------------------------------------------
$ME
    started: $(date)
comand line: $args
  found lib: $FOUND_LIB

Start_Log
}

#------------------------------------------------------------------------------
# Trapped on exit.  Umount (order is vital!) remove the work_dir and remove
# the lock file.
#------------------------------------------------------------------------------
clean_up() {
    local dir
    for dir in $SQFS_DIR $USB_DIR $WORK_DIR; do
        [ ${#dir} -eq 0 ] && continue
        is_mountpoint "$dir" || continue
        umount --recursive "$dir"
        rmdir "$dir"
    done
    rm -f $LOCK_FILE
}

#------------------------------------------------------------------------------
# Excessive code to try to load the dang library file.
#------------------------------------------------------------------------------
load_lib() {
    local file=$1 path=$2

    unset FOUND_LIB
    local dir lib found orig_ifs=$IFS
    IFS=:
    for dir in $path; do
        lib=$dir/$file
        test -r $lib || continue
        if ! . $lib; then
            printf "Error when loading library %s\n" "$lib" >&2
            printf "This is a fatal error\n" >&2
            exit 15
        fi
        FOUND_LIB=$lib
        IFS=$orig_ifs
        return 0
    done

    printf "Could not find library '%s' on path '%s'\n" "$file" "$path" >&2
    printf "This is a fatal error\n" >&2
    exit 17
}

#===== Start Here =============================================================
LIB_PATH="$LIB_PATH:$MY_DIR/../cli-shell-utils:$MY_DIR"
load_lib "$SHELL_LIB" "$LIB_PATH"

set_colors

main "$@"

